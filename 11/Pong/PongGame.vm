// Identifier name is PongGame
// static PongGame instance; 
// Identifier name is PongGame
// Identifier name is instance
// field Bat bat; 
// Identifier name is Bat
// Identifier name is bat
// field Ball ball; 
// Identifier name is Ball
// Identifier name is ball
// field int wall; 
// Identifier name is wall
// field boolean exit; 
// Identifier name is exit
// field int score; 
// Identifier name is score
// field int lastWall; 
// Identifier name is lastWall
// field int batWidth; 
// Identifier name is batWidth
// constructor PongGame new() { 
// Identifier name is PongGame
// Identifier name is new
// do Screen.clearScreen(); 
function PongGame.new 0
push constant 7
call Memory.alloc 1
pop pointer 0
// Identifier name is Screen
// Identifier name is clearScreen
call Screen.clearScreen 0
pop temp 0
// let batWidth = 50; 
// batWidth
// Identifier name is batWidth
push constant 50
pop this 6
// let bat = Bat.new(230, 229, batWidth, 7); 
// bat
// Identifier name is bat
// Identifier name is Bat
// Identifier name is new
push constant 230
push constant 229
// Identifier name is batWidth
push this 6
push constant 7
call Bat.new 4
pop this 0
// let ball = Ball.new(253, 222, 0, 511, 0, 229); 
// ball
// Identifier name is ball
// Identifier name is Ball
// Identifier name is new
push constant 253
push constant 222
push constant 0
push constant 511
push constant 0
push constant 229
call Ball.new 6
pop this 1
// do ball.setDestination(400,0); 
push this 1
// Identifier name is ball
// Identifier name is setDestination
push constant 400
push constant 0
call Ball.setDestination 3
pop temp 0
// do Screen.drawRectangle(0, 238, 511, 240); 
// Identifier name is Screen
// Identifier name is drawRectangle
push constant 0
push constant 238
push constant 511
push constant 240
call Screen.drawRectangle 4
pop temp 0
// do Output.moveCursor(22,0); 
// Identifier name is Output
// Identifier name is moveCursor
push constant 22
push constant 0
call Output.moveCursor 2
pop temp 0
// do Output.printString("Score: 0"); 
// Identifier name is Output
// Identifier name is printString
push constant 8
call String.new 1
push constant 83
call String.appendChar 2
push constant 99
call String.appendChar 2
push constant 111
call String.appendChar 2
push constant 114
call String.appendChar 2
push constant 101
call String.appendChar 2
push constant 58
call String.appendChar 2
push constant 32
call String.appendChar 2
push constant 48
call String.appendChar 2
call Output.printString 1
pop temp 0
// let exit = false; 
// exit
// Identifier name is exit
push constant 0
pop this 3
// let score = 0; 
// score
// Identifier name is score
push constant 0
pop this 4
// let wall = 0; 
// wall
// Identifier name is wall
push constant 0
pop this 2
// let lastWall = 0; 
// lastWall
// Identifier name is lastWall
push constant 0
pop this 5
// return this; 
push pointer 0
return
// } 
// method void dispose() { 
// Identifier name is dispose
// do bat.dispose(); 
function PongGame.dispose 0
push argument 0
pop pointer 0
push this 0
// Identifier name is bat
// Identifier name is dispose
call Bat.dispose 1
pop temp 0
// do ball.dispose(); 
push this 1
// Identifier name is ball
// Identifier name is dispose
call Ball.dispose 1
pop temp 0
// do Memory.deAlloc(this); 
// Identifier name is Memory
// Identifier name is deAlloc
push pointer 0
call Memory.deAlloc 1
pop temp 0
// return; 
push constant 0
return
// } 
// function void newInstance() { 
// Identifier name is newInstance
// let instance = PongGame.new(); 
function PongGame.newInstance 0
// instance
// Identifier name is instance
// Identifier name is PongGame
// Identifier name is new
call PongGame.new 0
pop static 0
// return; 
push constant 0
return
// } 
// function PongGame getInstance() { 
// Identifier name is PongGame
// Identifier name is getInstance
// return instance; 
function PongGame.getInstance 0
// Identifier name is instance
push static 0
return
// } 
// method void run() { 
// Identifier name is run
// var char key; 
// Identifier name is key
// while (~exit) { 
function PongGame.run 1
push argument 0
pop pointer 0
label WHILE_EXP0
// Identifier name is exit
push this 3
not
not
if-goto WHILE_END0
// while ((key = 0) & (~exit)) { 
label WHILE_EXP1
// Identifier name is key
push local 0
push constant 0
eq
// Identifier name is exit
push this 3
not
and
not
if-goto WHILE_END1
// let key = Keyboard.keyPressed(); 
// key
// Identifier name is key
// Identifier name is Keyboard
// Identifier name is keyPressed
call Keyboard.keyPressed 0
pop local 0
// do bat.move(); 
push this 0
// Identifier name is bat
// Identifier name is move
call Bat.move 1
pop temp 0
// do moveBall(); 
// Identifier name is moveBall
push pointer 0
call PongGame.moveBall 1
pop temp 0
// do Sys.wait(50); 
// Identifier name is Sys
// Identifier name is wait
push constant 50
call Sys.wait 1
pop temp 0
// } 
goto WHILE_EXP1
label WHILE_END1
// if (key = 130) { do bat.setDirection(1); } 
// if found
// Identifier name is key
push local 0
push constant 130
eq
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push this 0
// Identifier name is bat
// Identifier name is setDirection
push constant 1
call Bat.setDirection 2
pop temp 0
goto IF_END2
// else { 
label IF_FALSE2
// if (key = 132) { do bat.setDirection(2); } 
// if found
// Identifier name is key
push local 0
push constant 132
eq
if-goto IF_TRUE3
goto IF_FALSE3
label IF_TRUE3
push this 0
// Identifier name is bat
// Identifier name is setDirection
push constant 2
call Bat.setDirection 2
pop temp 0
goto IF_END3
// else { 
label IF_FALSE3
// if (key = 140) { let exit = true; } 
// if found
// Identifier name is key
push local 0
push constant 140
eq
if-goto IF_TRUE4
goto IF_FALSE4
label IF_TRUE4
// exit
// Identifier name is exit
push constant 0
not
pop this 3
goto IF_END4
// } 
label IF_FALSE4
label IF_END4
label IF_END3
label IF_END2
// while ((~(key = 0)) & (~exit)) { 
label WHILE_EXP5
// Identifier name is key
push local 0
push constant 0
eq
not
// Identifier name is exit
push this 3
not
and
not
if-goto WHILE_END5
// let key = Keyboard.keyPressed(); 
// key
// Identifier name is key
// Identifier name is Keyboard
// Identifier name is keyPressed
call Keyboard.keyPressed 0
pop local 0
// do bat.move(); 
push this 0
// Identifier name is bat
// Identifier name is move
call Bat.move 1
pop temp 0
// do moveBall(); 
// Identifier name is moveBall
push pointer 0
call PongGame.moveBall 1
pop temp 0
// do Sys.wait(50); 
// Identifier name is Sys
// Identifier name is wait
push constant 50
call Sys.wait 1
pop temp 0
// } 
goto WHILE_EXP5
label WHILE_END5
goto WHILE_EXP0
label WHILE_END0
// if (exit) { 
// if found
// Identifier name is exit
push this 3
if-goto IF_TRUE6
goto IF_FALSE6
label IF_TRUE6
// do Output.moveCursor(10,27); 
// Identifier name is Output
// Identifier name is moveCursor
push constant 10
push constant 27
call Output.moveCursor 2
pop temp 0
// do Output.printString("Game Over"); 
// Identifier name is Output
// Identifier name is printString
push constant 9
call String.new 1
push constant 71
call String.appendChar 2
push constant 97
call String.appendChar 2
push constant 109
call String.appendChar 2
push constant 101
call String.appendChar 2
push constant 32
call String.appendChar 2
push constant 79
call String.appendChar 2
push constant 118
call String.appendChar 2
push constant 101
call String.appendChar 2
push constant 114
call String.appendChar 2
call Output.printString 1
pop temp 0
// } 
goto IF_END6
// return; 
label IF_FALSE6
label IF_END6
push constant 0
return
// } 
// method void moveBall() { 
// Identifier name is moveBall
// var int bouncingDirection, batLeft, batRight, ballLeft, ballRight; 
// Identifier name is bouncingDirection
// Identifier name is batLeft
// Identifier name is batRight
// Identifier name is ballLeft
// Identifier name is ballRight
// let wall = ball.move(); 
function PongGame.moveBall 5
push argument 0
pop pointer 0
// wall
// Identifier name is wall
// Identifier name is ball
push this 1
// Identifier name is move
call Ball.move 1
pop this 2
// if ((wall > 0) & (~(wall = lastWall))) { 
// if found
// Identifier name is wall
push this 2
push constant 0
gt
// Identifier name is wall
push this 2
// Identifier name is lastWall
push this 5
eq
not
and
if-goto IF_TRUE7
goto IF_FALSE7
label IF_TRUE7
// let lastWall = wall; 
// lastWall
// Identifier name is lastWall
// Identifier name is wall
push this 2
pop this 5
// let bouncingDirection = 0; 
// bouncingDirection
// Identifier name is bouncingDirection
push constant 0
pop local 0
// let batLeft = bat.getLeft(); 
// batLeft
// Identifier name is batLeft
// Identifier name is bat
push this 0
// Identifier name is getLeft
call Bat.getLeft 1
pop local 1
// let batRight = bat.getRight(); 
// batRight
// Identifier name is batRight
// Identifier name is bat
push this 0
// Identifier name is getRight
call Bat.getRight 1
pop local 2
// let ballLeft = ball.getLeft(); 
// ballLeft
// Identifier name is ballLeft
// Identifier name is ball
push this 1
// Identifier name is getLeft
call Ball.getLeft 1
pop local 3
// let ballRight = ball.getRight(); 
// ballRight
// Identifier name is ballRight
// Identifier name is ball
push this 1
// Identifier name is getRight
call Ball.getRight 1
pop local 4
// if (wall = 4) { 
// if found
// Identifier name is wall
push this 2
push constant 4
eq
if-goto IF_TRUE8
goto IF_FALSE8
label IF_TRUE8
// let exit = (batLeft > ballRight) | (batRight < ballLeft); 
// exit
// Identifier name is exit
// Identifier name is batLeft
push local 1
// Identifier name is ballRight
push local 4
gt
// Identifier name is batRight
push local 2
// Identifier name is ballLeft
push local 3
lt
or
pop this 3
// if (~exit) { 
// if found
// Identifier name is exit
push this 3
not
if-goto IF_TRUE9
goto IF_FALSE9
label IF_TRUE9
// if (ballRight < (batLeft + 10)) { let bouncingDirection = -1; } 
// if found
// Identifier name is ballRight
push local 4
// Identifier name is batLeft
push local 1
push constant 10
add
lt
if-goto IF_TRUE10
goto IF_FALSE10
label IF_TRUE10
// bouncingDirection
// Identifier name is bouncingDirection
push constant 1
neg
pop local 0
goto IF_END10
// else { 
label IF_FALSE10
// if (ballLeft > (batRight - 10)) { let bouncingDirection = 1; } 
// if found
// Identifier name is ballLeft
push local 3
// Identifier name is batRight
push local 2
push constant 10
sub
gt
if-goto IF_TRUE11
goto IF_FALSE11
label IF_TRUE11
// bouncingDirection
// Identifier name is bouncingDirection
push constant 1
pop local 0
goto IF_END11
// } 
label IF_FALSE11
label IF_END11
label IF_END10
// let batWidth = batWidth - 2; 
// batWidth
// Identifier name is batWidth
// Identifier name is batWidth
push this 6
push constant 2
sub
pop this 6
// do bat.setWidth(batWidth); 
push this 0
// Identifier name is bat
// Identifier name is setWidth
// Identifier name is batWidth
push this 6
call Bat.setWidth 2
pop temp 0
// let score = score + 1; 
// score
// Identifier name is score
// Identifier name is score
push this 4
push constant 1
add
pop this 4
// do Output.moveCursor(22,7); 
// Identifier name is Output
// Identifier name is moveCursor
push constant 22
push constant 7
call Output.moveCursor 2
pop temp 0
// do Output.printInt(score); 
// Identifier name is Output
// Identifier name is printInt
// Identifier name is score
push this 4
call Output.printInt 1
pop temp 0
// } 
goto IF_END9
label IF_FALSE11
label IF_END9
goto IF_END8
// do ball.bounce(bouncingDirection); 
label IF_FALSE11
label IF_END8
push this 1
// Identifier name is ball
// Identifier name is bounce
// Identifier name is bouncingDirection
push local 0
call Ball.bounce 2
pop temp 0
// } 
goto IF_END7
// return; 
label IF_FALSE11
label IF_END7
push constant 0
return
// } 
